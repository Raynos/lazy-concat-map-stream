{
  "name": "proxy-stream",
  "version": "0.2.6",
  "description": "Create a wrapped stream",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/proxy-stream.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/proxy-stream",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/proxy-stream/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "re-emitter": "~0.2.0",
    "read-write-stream": "~0.1.0"
  },
  "devDependencies": {
    "read-stream": "~0.4.0",
    "write-stream": "~0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/proxy-stream/raw/master/LICENSE"
    }
  ],
  "scripts": {},
  "readme": "# proxy-stream\n\nCreate a wrapped stream\n\n## Example\n\n``` js\nvar proxy = require(\"proxy-stream\")\n    , WriteStream = require(\"write-stream\")\n\nfunction map(stream, iterator) {\n    return proxy(stream, function transformation(chunk, next) {\n        next(iterator(chunk))\n    })\n}\n\nfunction mapConcat(stream, iterator) {\n    return proxy(stream, function transformation(chunk, next) {\n        var list = iterator(chunk)\n        list.forEach(function (item) {\n            next(item)\n        })\n    })\n}\n\nfunction filter(stream, predicate) {\n    return proxy(stream, function transformation(chunk, next) {\n        var keep = predicate(chunk)\n        if (keep) {\n            next(chunk)\n        }\n    })\n}\n\nfunction reductions(stream, iterator, initial) {\n    return proxy(stream, function transformation (chunk, next) {\n        initial = iterator(initial, chunk)\n        next(initial)\n    })\n}\n\nfunction flatten(stream) {\n    var proxied = proxy(stream, function transformation(other, next, end) {\n        other.pipe(WriteStream(next))\n        other.on(\"end\", end)\n        other.on(\"error\", function (err) {\n            proxied.emit(\"error\", err)\n        })\n    })\n\n    return proxied\n}\n\nfunction mapAsync(stream, iterator) {\n    var proxied = proxy(stream, function transformation(chunk, next, end) {\n        iterator(chunk, function (err, value) {\n            if (err) {\n                return proxied.emit(\"error\", err)\n            }\n\n            next(value)\n            end()\n        })\n    })\n\n    return proxied\n}\n```\n\nProxy stream is used to create a new stream based on another stream.\n\nIt's mainly used as a building block for reduce / map / filter\n\n## Installation\n\n`npm install proxy-stream`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n",
  "_id": "proxy-stream@0.2.6",
  "_from": "proxy-stream"
}
