{
  "name": "read-write-stream",
  "version": "0.1.0",
  "description": "Base stream class for RW stream",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/read-write-stream.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/read-write-stream",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/read-write-stream/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "readable-stream": "~0.0.2",
    "read-stream": "~0.4.0",
    "xtend": "~1.0.3"
  },
  "devDependencies": {
    "write-stream": "~0.4.0",
    "axon": "~0.1.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/read-write-stream/raw/master/LICENSE"
    }
  ],
  "scripts": {},
  "readme": "# read-write-stream\n\nBase stream class for through RW stream\n\n## Example through\n\n``` js\nvar through = require(\"read-write-stream\")\n    , transform = through(function write(chunk, queue) {\n        queue.push(chunk * chunk)\n    }).stream\n    , to = require(\"write-stream\").toArray\n    , from = require(\"read-stream\").fromArray\n\nfrom([1,2,3]).pipe(transform).pipe(to([], function end(list) {\n    console.log(list); // [1, 4, 9]\n}))\n```\n\n## Example duplex\n\n``` js\nvar axon = require(\"axon\")\n    , pub = axon.socket(\"push\")\n    , sub = axon.socket(\"pull\")\n    , duplex = require(\"read-write-stream\")\n    , from = require(\"read-stream\").fromArray\n    , to = require(\"write-stream\").toArray\n\n// Writable end of duplex\nvar queue = duplex(function write(chunk) {\n    pub.send(chunk)\n}, function end() {\n    pub.send(\"__GOODBYE__\")\n    setTimeout(pub.close.bind(pub), 1000)\n})\n\n// Readable end of duplex\nsub.on(\"message\", function (chunk) {\n    chunk = chunk.toString()\n    if (chunk === \"__GOODBYE__\") {\n        queue.end()\n        sub.close()\n    } else {\n        queue.push(chunk)\n    }\n})\n\n// Open underlying writable data source\npub.bind(3000, function () {\n    // Open underlying readable data source\n    sub.connect(3000, function () {\n        // flow data from array\n        from([\"foo\", \"bar\", \"baz\"])\n            // into duplex\n            .pipe(queue.stream)\n            // into array\n            .pipe(to([], function (list) {\n                console.log(\"list from sub\", list)\n            }))\n    })\n})\n```\n\n## Installation\n\n`npm install read-write-stream`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n",
  "_id": "read-write-stream@0.1.0",
  "_from": "read-write-stream@~0.1.0"
}
